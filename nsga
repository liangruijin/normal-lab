#include <opencv2/opencv.hpp> 
#include <iostream>
#include <io.h>
#include <string>
#include <fstream>
#include<memory>
#include<stdio.h>
#include<stdlib.h>
#include<Windows.h>
#include<math.h>
#include<time.h>
using namespace cv;



#define Dimension 2//基因维数，在这里即ZDT1问题xi的i的最大值
#define popsize 100//种群大小
#define generation 500 //繁衍代数
#define URAND (rand()/(RAND_MAX+1.0))//产生随机数

int temp1[popsize];//临时数组
int mark[popsize];//标记数组
//以上两个数组用于产生新的子代
using namespace std;

class individual
{
public:
	double value[Dimension];
	//double value1[Dimension];//x1 i的值
	//double value2[Dimension];//x2 i的值
	int sp[2 * popsize];
	//被支配个体集合SP。该量是可行解空间中所有被个体p支配的个体组成的集合。
	int np;
	//支配个数np。该量是在可行解空间中可以支配个体p的所以个体的数量。
	int is_dominated;//集合sp的个数
	void init();//初始化个体
	int rank;//优先级，Pareto级别为当前最高级
	double crowding_distance;//拥挤距离
	double fvalue[2];//ZDT1问题目标函数的值
	void f_count();//计算fvalue的值
};

class population
{
public:
	population();//类初始化
	individual P[popsize];
	individual Q[popsize];
	individual R[2 * popsize];
	void set_p_q();
	//随机产生一个初始父代P，在此基础上采用二元锦标赛选择、
	//交叉和变异操作产生子代Q。P和Q群体规模均为popsize
	//将Pt和Qt并入到Rt中（初始时t=0），对Rt进行快速非支配解排序，
	//构造其所有不同等级的非支配解集F1、F2........
	int Rnum;
	int Pnum;
	int Qnum;
	//P,Q,R中元素的个数
	void make_new_pop();//产生新的子代
	void fast_nondominated_sort();//快速非支配排序
	void calu_crowding_distance(int i);//拥挤距离计算
	void f_sort(int i);//对拥挤距离降序排列
	void maincal();//主要操作
	int choice(int a, int b);
	//两个个体属于不同等级的非支配解集，优先考虑等级序号较小的
	//若两个个体属于同一等级的非支配解集，优先考虑拥挤距离较大的
	int len[2 * popsize];//各个变异交叉后的群体Fi的长度的集合
	int len_f;//整个群体rank值
};

individual F[2 * popsize][2 * popsize];

double rand_real(double low, double high)
//产生随机实数
{
	double h;
	h = (high - low)*URAND + low + 0.001;
	if (h >= high)
		h = high - 0.001;
	return h;
}

int rand_int(int low, int high)
//产生随机整数
{
	return int((high - low + 1)*URAND) + low;
}

int cmp1(const void *a, const void *b)
//目标函数f1的升序排序
{
	const individual *e = (const individual *)a;
	const individual *f = (const individual *)b;
	if (e->fvalue[0] == f->fvalue[0])
		return 0;
	else if (e->fvalue[0] < f->fvalue[0])
		return -1;
	else return 1;
}

int cmp2(const void *a, const void *b)
//目标函数f2的升序排序
{
	const individual *e = (const individual *)a;
	const individual *f = (const individual *)b;
	if (e->fvalue[1] == f->fvalue[1])
		return 0;
	else if (e->fvalue[1] < f->fvalue[1])
		return -1;
	else return 1;
}
int cmp_c_d(const void *a, const void *b)
//对拥挤距离降序排序
{
	const individual *e = (const individual *)a;
	const individual *f = (const individual *)b;
	if (e->crowding_distance == f->crowding_distance)
		return 0;
	else if (e->crowding_distance < f->crowding_distance)
		return 1;
	else
		return -1;
}

void population::f_sort(int i)
{
	int n;
	n = len[i];
	qsort(F[i], n, sizeof(individual), cmp_c_d);
}

population::population()
{
	int i;
	for (i = 0; i < popsize; i++)
	{
		P[i].init();
	}
	for (i = 0; i < popsize; i++)
	{
		P[i].f_count();
	}
	Pnum = popsize;
	Qnum = 0;
	Rnum = 0;
}

void individual::init()
{
	//for (int i = 0; i < Dimension; i++)
	//{
	value[0] = rand_real(0.1, 1.0);
	value[1] = rand_real(0.0, 5.0);
	//value2[i] = rand_real(0.0, 5.0);
//}
}

//void population::make_new_pop()
//{
//	int i, j, x, y, t1, t2, t3;
//	double s, u, b;
//	memset(mark, 0, sizeof(mark));
//	t3 = 0;
//	while (t3 < popsize / 2)
//	{
//		while (t1 = t2 = rand_int(0, popsize - 1), mark[t1]);
//		while (t1 == t2 || mark[t2])
//		{
//			t2 = rand_int(0, popsize - 1);
//		}
//		t1 = choice(t1, t2);
//		temp1[t3++] = t1;
//		mark[t1] = 1;
//	}
//	for (i = 0; i < popsize; i++)
//	{
//		s = rand_real(0.0, 1.0);
//		if (s <= 0.9)
//		{
//			for (j = 0; j < Dimension; j++)
//			{
//				u = rand_real((0.0 + 1e-6), (1.0 - 1e-6));
//				if (u <= 0.5)
//					b = pow(2 * u, 1.0 / 21);
//				else
//					b = 1.0 / pow(2 * (1 - u), 1.0 / 21);
//				x = y = rand_int(0, popsize / 2 - 1);
//				while (x == y)
//					y = rand_int(0, popsize / 2 - 1);
//				
//	     	Q[i].value[j] = 1.0 / 2 * ((1 - b)*P[temp1[x]].value[j] + (1 + b)*P[temp1[y]].value[j]);
//				
//
//				if (j!=1&&Q[i].value[j] <=0.1)
//					Q[i].value[j] = 0.1+1e-6;
//				else if (j != 1 && Q[i].value[j] > 1)
//					Q[i].value[j] = 1- (1e-6);
//				if (j == 1 && Q[i].value[j] <= 0)
//					Q[i].value[j] = 1e-6;
//				else if (j == 1 && Q[i].value[j] > 5)
//					Q[i].value[j] = 5.0 - (1e-6);
//
//
//				if (i + 1 < popsize)
//				{
//					Q[i + 1].value[j] = 1.0 / 2 * ((1 + b)*P[temp1[x]].value[j] + (1 - b)*P[temp1[y]].value[j]);
//					//Q[i + 1].value2[j] = 1.0 / 2 * ((1 + b)*P[temp1[x]].value2[j] + (1 - b)*P[temp1[y]].value2[j]);
//					if (j != 1&&Q[i + 1].value[j] <= 0.1)
//						Q[i + 1].value[j] = 0.1+1e-6;
//					else if (j != 1 && Q[i + 1].value[j] > 1)
//						Q[i + 1].value[j] = (1 - 1e-6);
//					if (j == 1 && Q[i + 1].value[j] <= 0)
//						Q[i + 1].value[j] = 1e-6;
//					else if (j == 1 && Q[i + 1].value[j] > 5)
//						Q[i + 1].value[j] = 5- (1e-6);
//				}
//			}
//			i++;
//		}
//		else
//		{
//			for (j = 0; j < Dimension; j++)
//			{
//				x = rand_int(0, popsize / 2 - 1);
//				u = rand_real(0.0 + (1e-6), 1.0 - (1e-6));
//				if (u < 0.5)
//					u = pow(2 * u, 1.0 / 21) - 1;
//				else
//					u = 1 - pow(2 * (1 - u), 1.0 / 21);
//				Q[i].value[j] = P[temp1[x]].value[j] + (1.0 - 0.0)*u;
//				if (j != 1 && Q[i + 1].value[j] <= 0.1)
//					Q[i + 1].value[j] = 0.1 + 1e-6;
//				else if (j != 1 && Q[i + 1].value[j] > 1)
//					Q[i + 1].value[j] = 1 - (1e-6);
//				if (j == 1 && Q[i + 1].value[j] <= 0)
//					Q[i + 1].value[j] = 1e-6;
//				else if (j == 1 && Q[i + 1].value[j] > 5)
//					Q[i + 1].value[j] = 5 - (1e-6);
//			}
//		}
//	}
//	Qnum = popsize;
//	for (i = 0; i < popsize; i++)
//		Q[i].f_count();
//}
void population::make_new_pop()
{
	int i, j, x, y, t1, t2, t3;
	double s, u, b;
	memset(mark, 0, sizeof(mark));
	t3 = 0;
	while (t3 < popsize / 2)
	{
		while (t1 = t2 = rand_int(0, popsize - 1), mark[t1]);
		while (t1 == t2 || mark[t2])
		{
			t2 = rand_int(0, popsize - 1);
		}
		t1 = choice(t1, t2);
		temp1[t3++] = t1;
		mark[t1] = 1;
	}
	for (i = 0; i < popsize; i++)
	{
		s = rand_real(0.0, 1.0);
		if (s <= 0.9)
		{
			for (j = 0; j < Dimension; j++)
			{
				u = rand_real((0.0 + 1e-6), (1.0 - 1e-6));
				if (u <= 0.5)
					b = pow(2 * u, 1.0 / 21);
				else
					b = 1.0 / pow(2 * (1 - u), 1.0 / 21);
				x = y = rand_int(0, popsize / 2 - 1);
				while (x == y)
					y = rand_int(0, popsize / 2 - 1);
				Q[i].value[j] = 1.0 / 2 * ((1 - b)*P[temp1[x]].value[j] + (1 + b)*P[temp1[y]].value[j]);
				if (Q[i].value[j] < 0)
					Q[i].value[j] = 1e-6;
				else if (Q[i].value[j] > 1)
					Q[i].value[j] = 1.0 - (1e-6);
				if (i + 1 < popsize)
				{
					Q[i + 1].value[j] = 1.0 / 2 * ((1 + b)*P[temp1[x]].value[j] + (1 - b)*P[temp1[y]].value[j]);
					if (Q[i + 1].value[j] <= 0)
						Q[i + 1].value[j] = 1e-6;
					else if (Q[i + 1].value[j] > 1)
						Q[i + 1].value[j] = (1 - 1e-6);
				}
			}
			i++;
		}
		else
		{
			for (j = 0; j < Dimension; j++)
			{
				x = rand_int(0, popsize / 2 - 1);
				u = rand_real(0.0 + (1e-6), 1.0 - (1e-6));
				if (u < 0.5)
					u = pow(2 * u, 1.0 / 21) - 1;
				else
					u = 1 - pow(2 * (1 - u), 1.0 / 21);
				Q[i].value[j] = P[temp1[x]].value[j] + (1.0 - 0.0)*u;
				if (Q[i].value[j] < 0)
					Q[i].value[j] = 1e-6;
				else if (Q[i].value[j] > 1)
					Q[i].value[j] = 1 - (1e-6);
			}
		}
	}
	Qnum = popsize;
	for (i = 0; i < popsize; i++)
		Q[i].f_count();
}

void population::set_p_q()
{
	Rnum = 0;
	Qnum = popsize;
	int i;
	for (i = 0; i < Pnum; i++)
		R[Rnum++] = P[i];
	for (i = 0; i < Qnum; i++)
		R[Rnum++] = Q[i];
	for (i = 0; i < 2 * popsize; i++)
		R[i].f_count();
}



void individual::f_count()
{
	fvalue[0] = value[0];
	/*int i;
	double g = 1, sum = 0;
	for (i = 1; i < Dimension; i++)
	{
		sum += value[i];
	}
	sum = 9 * (sum / (Dimension - 1));
	g += sum;
	fvalue[1] = g * (1 - sqrt(value[0] / g));*/
	fvalue[1] = ((1 + value[1]) / value[0]);
}

bool e_is_dominated(const individual &a, const individual &b)
{
	if ((a.fvalue[0] <= b.fvalue[0]) && (a.fvalue[1] <= b.fvalue[1]))
	{
		if ((a.fvalue[0] == b.fvalue[0]) && a.fvalue[1] == b.fvalue[1])
			return false;
		else
			return true;
	}
	else
		return false;
}

void population::fast_nondominated_sort()
{
	int i, j, k;
	individual H[2 * popsize];
	int h_len = 0;
	for (i = 0; i < 2 * popsize; i++)
	{
		R[i].np = 0;
		R[i].is_dominated = 0;
		len[i] = 0;
	}
	for (i = 0; i < 2 * popsize; i++)
	{
		for (j = 0; j < 2 * popsize; j++)
		{
			if (i != j)
			{
				if (e_is_dominated(R[i], R[j]))
					R[i].sp[R[i].is_dominated++] = j;
				else if (e_is_dominated(R[j], R[i]))
					R[i].np += 1;
			}
		}
		if (R[i].np == 0)
		{
			len_f = 1;
			F[0][len[0]++] = R[i];
		}

	}
	i = 0;
	while (len[i] != 0)
	{
		h_len = 0;
		for (j = 0; j < len[i]; j++)
		{
			for (k = 0; k < F[i][j].is_dominated; k++)
			{
				R[F[i][j].sp[k]].np--;
				if (R[F[i][j].sp[k]].np == 0)
				{
					H[h_len++] = R[F[i][j].sp[k]];
					R[F[i][j].sp[k]].rank = i + 2;
				}
			}
		}
		i++;
		len[i] = h_len;
		if (h_len != 0)
		{
			len_f++;
			for (j = 0; j < len[i]; j++)
				F[i][j] = H[j];
		}
	}
}

void population::calu_crowding_distance(int i)
{
	int n = len[i];
	double m_max, m_min;
	int j;
	for (j = 0; j < n; j++)
		F[i][j].crowding_distance = 0;
	F[i][0].crowding_distance = F[i][n - 1].crowding_distance = 0xffffff;
	qsort(F[i], n, sizeof(individual), cmp1);
	m_max = -0xfffff;
	m_min = 0xfffff;
	for (j = 0; j < n; j++)
	{
		if (m_max < F[i][j].fvalue[0])
			m_max = F[i][j].fvalue[0];
		if (m_min > F[i][j].fvalue[0])
			m_min = F[i][j].fvalue[0];
	}
	for (j = 1; j < n - 1; j++)
		F[i][j].crowding_distance += (F[i][j + 1].fvalue[0] - F[i][j - 1].fvalue[0]) / (m_max - m_min);
	//F[i][0].crowding_distance = F[i][n - 1].crowding_distance = 0xffffff;
	qsort(F[i], n, sizeof(individual), cmp2);
	F[i][0].crowding_distance = F[i][n - 1].crowding_distance = 0xffffff;
	m_max = -0xfffff;
	m_min = 0xfffff;
	for (j = 0; j < n; j++)
	{
		if (m_max < F[i][j].fvalue[1])
			m_max = F[i][j].fvalue[1];
		if (m_min > F[i][j].fvalue[1])
			m_min = F[i][j].fvalue[1];
	}
	for (j = 1; j < n - 1; j++)
		F[i][j].crowding_distance += (F[i][j + 1].fvalue[1] - F[i][j - 1].fvalue[1]) / (m_max - m_min);
}


int population::choice(int a, int b)
{
	if (P[a].rank < P[b].rank)
		return a;
	else if (P[a].rank == P[b].rank)
	{
		if (P[a].crowding_distance > P[b].crowding_distance)
			return a;
		else
			return b;
	}
	else
		return b;
}

void population::maincal()
{
	int s, i, j;
	s = generation;
	make_new_pop();
	while (s--)
	{
		printf("The %d generation\n", s);
		set_p_q();
		fast_nondominated_sort();
		Pnum = 0;
		i = 0;
		while (Pnum + len[i] <= popsize)
		{
			calu_crowding_distance(i);
			for (j = 0; j < len[i]; j++)
				P[Pnum++] = F[i][j];
			i++;
			if (i >= len_f)break;
		}
		if (i < len_f)
		{
			calu_crowding_distance(i);
			f_sort(i);
		}
		for (j = 0; j < popsize - Pnum; j++)
			P[Pnum++] = F[i][j];
		make_new_pop();
	}
}

int main()
{
	errno_t err;
	FILE *p;
	err = fopen_s(&p, "c:\\Users\\梁锐\\Desktop\\test.txt", "w+");
	srand((unsigned int)(time(0)));
	population pop;
	pop.maincal();
	int i, j;
	fprintf(p, "XuYi All Rights Reserved.\nWelcome to OmegaXYZ: www.omegaxyz.com\n");
	fprintf(p, "Problem ZDT1\n");
	fprintf(p, "\n");
	for (i = 0; i < popsize; i++)
	{
		fprintf(p, "The %d generation situation:\n", i);
		for (j = 1; j <= Dimension; j++)
		{
			fprintf(p, "x%d=%e  ", j, pop.P[i].value[j]);
		}
		fprintf(p, "\n");
		fprintf(p, "f1(x)=%f   f2(x)=%f\n", pop.P[i].fvalue[0], pop.P[i].fvalue[1]);
	}
	fclose(p);
	Mat src;
	src = imread("C:/Users/梁锐/Desktop/56f252b03d06c.jpg");
	if (!src.data) {
		printf("could not load image...\n");
		return -1;
	}
	
	cvtColor(src, src, COLOR_BGR2GRAY);
	Mat dst = Mat::zeros(src.size(), src.type());
	for (i = 0; i < popsize; i++)
	{
		if (pop.P[i].fvalue[0] > 0 && pop.P[i].fvalue[0] < 1 && pop.P[i].fvalue[1]>0 && pop.P[i].fvalue[1] < 10)
		{
			dst.at<uchar>((1.0 - pop.P[i].fvalue[0] / 1.0) * 718, 50+(pop.P[i].fvalue[1] / 10.0) * 976) = 255;
			double x = (1.0 - pop.P[i].fvalue[0] / 1.0) * 718;
			double y = 50+(pop.P[i].fvalue[1] / 10.0) * 976;
			Point point(y, x);
			circle(dst, point, 3, 255,4);
		}
	}
	Point s1(50,718), z1(50,0), z2(1024,718);
	line(dst, s1, z1, 255, 1);
	line(dst, s1, z2, 255, 1);
	for (int i = 0; i <= 10; i++)
	{
		int x1 = 50, y1 = 718 - (718 / 10)*i;
		Point b1(x1, y1), f1(x1 + 4, y1),t1(x1-35,y1+5);
		line(dst, b1, f1, 255, 1);
		string rel_1 = to_string(i);
		rel_1 =   rel_1 + ".0";
		if(i>0) putText(dst, rel_1, t1, FONT_HERSHEY_SIMPLEX, 0.5, 255);
	}
	for (int i = 0; i <= 10; i++)
	{
		int x2 = 50+ (976 / 10)*i, y2 = 718;
		Point b2(x2, y2), f2(x2, y2 - 4), t2(x2-5, y2 +16);
			string rel_2= to_string(i);
		rel_2 = "0."+rel_2 + "0";
		putText(dst, rel_2, t2, FONT_HERSHEY_SIMPLEX, 0.5, 255);
		line(dst, b2, f2, 255, 1);
	}
	Point f2(65,30), f1(960,695);
	putText(dst, "f1", f1, FONT_HERSHEY_SIMPLEX, 0.8, 255);
	putText(dst, "f2", f2, FONT_HERSHEY_SIMPLEX, 0.8, 255);

	imshow(" ", dst);
	waitKey(0);
	return 1;
}
